[{"Q":"Judgments to our discretion","A":"","keys":["matching","cleaning"]},{"Q":"Match rules?","A":"You'll have to figure out what constitute good match rules for your system. Think about it: at what point would you consider two people the same? Everything is the same? Just the first and last names and the DOB are the same?","keys":["matching","rules"]},{"Q":"External libraries/other code","A":"You're welcome to use external libraries for things like cleaning up dates, where it's mostly grunt work. Things that need intellectual input, like matching tuples needs to be written by each team.","keys":["libraries","code"]},{"Q":"Where & how","A":"The data is a munged version of a list of national providers. We got it by asking friends for it. We do have a golden key version, but it's not the best version possible.","keys":["data"]},{"Q":"Cleanse addresses","A":"You are free to cleanse the addresses if it helps you in matching records. But you definitely don't need to certify deliverability.","keys":["addresses","cleaning"]},{"Q":"Phone numbers","A":"Output phone numbers should be in a format that matches this regular expression: `(\\d-)?(\\(\\d{3}\\))?\\d{3}-\\d{4}\\[(\\d+)?`","keys":["phone","cleaning"]},{"Q":"English?","A":"Not all the text involved will be in English, or even in ASCII. Names, in particular will not be English in all cases.","keys":["data"]},{"Q":"Type?","A":"A single type will be provided and correct on all records. _Do not merge togther records with different types!_","keys":["data","type"]},{"Q":"Names","A":"There could be typos that make two people have the same name--you'll have to figure that out. If two people seem to be the same person, then you'll want to attach the same master key to them.","keys":["matching","data"]},{"Q":"DOB","A":"You may assume that the calendar system is Gregorian, as long as you deal with leap years properly.","keys":["dates","data"]},{"Q":"Phone numbers","A":"Phone numbers may potentially be international. You'll need to consider what that will mean about the format.","keys":["phone","data"]},{"Q":"Changes in addresses?","A":"You'll just be creating an address list file which may have duplicate addresses. You don't need to represent changes of address, but you will have to figure out that the person is still the same. Keep in mind that a practice may have multiple offices, and in some places those offices may even be in multiple states!","keys":["addresses","data"]},{"Q":"Will parts be in right fields?","A":"Maybe? Some will be more likely to be wrong than others. It is likely, for example, that there will be blurring of organization names into location names. For example, if an address is ~~~ John Smith c/o Sacred Heart Medical Center 5555 Deep's Lane New Orkaen, CA 55555 ~~~ then it is likely that the \"Sacred Heart Medical Center\" part will end up in the wrong field.  Note as well that stenographers will sometimes add comments for their own use in fields that don't make sense. key: matching, data","keys":[]},{"Q":"Specialty","A":"The \"specialty\" for a provider is a weird string containing a number. A lookup table to convert from that number to a human-readable description will be provided.","keys":["specialties"]},{"Q":"Required data","A":"The only data which is guaranteed to be on every record is its type, a provider name, and a key which may be used to reference it. Nothing else is guaranteed. In particular, there may be a secondary specialty and no primary specialty, or there may be a primary specialty and no secondary specialty.","keys":["data"]},{"Q":"Single flat file?","A":"The data will be provided as a single flat file. You will be responsible for getting it into a database.","keys":["input"]},{"Q":"Specialty codes","A":"The specialty codes are not necessarily valid. Do not rely on them matching anything in the lookup table.","keys":["specialties"]},{"Q":"Null format","A":"You'll have to look at the data you're provided in order to determine the format of the null values in it.","keys":["data"]},{"Q":"Indication of time for trustworthiness","A":"If you really want it, we may be able to provide an indication of the age of each record. But how would you determine a relationship between a record's age and its reliability? Whether it's better would be up to you--we have no hints for you on the relative trustworthiness of records from different time periods.","keys":["matching","cleaning"]},{"Q":"Conflicting information with regard to individual or organization","A":"There will be no conflicts between the information in the `type` field. However, the information in the `sole proprietor` field is suspect, as with any other field besides `type`.","keys":["data","type"]},{"Q":"Is 9-digit postcode better than 5-digit, or should they all be 5-digit if can't get 9?","A":"Be as precise as possible, but watch out for junk data in the last 4 digits. So don't throw away the last four digits of all the postcodes, just because you can't get last-four information for some of them.","keys":["addresses"]},{"Q":"Domain-specific matching rules?","A":"The only domain-specific matching rule is _don't match individuals to organizations._","keys":["matching","rules","type"]},{"Q":"Other data","A":"You'll need the other data you're planning to use to be part of your ER diagram. This means that you'll need to know what you're doing ahead of time. You are welcome to use _reference data_, that is, data downloaded from another source, in order to attempt to get a better match on the data you're mastering. But this will need to be declared and modeled in the database, and, more importantly, data from the internet is not guaranteed to be clean or accurate. In fact, this is likely to be difficult.","keys":["code"]},{"Q":"Number of close matches needed to merge?","A":"You'll need to decide on the number of close matches between fields you'll require in order to consider something a match. You might look at the data and where bad matches are coming from in order to give this number a sane value. This number typically depends on the client---you'll want to make this number configurable so changes aren't overwhelming.","keys":["matching"]},{"Q":"Data from only one unreliable record","A":"You are welcome to throw away data if you determine it's unreliable. Our only requirement is that this action be auditable.","keys":["cleaning","matching"]},{"Q":"Extract and transformation done?","A":"We've done the extract and transform to get the data out of the client side systems. You'll need to do the MDM-side ETL to get the data into your database.","keys":["input"]},{"Q":"Transformation process","A":"You'll need to be able to convert the flat-file database we'll be providing you into something which can be loaded into your database.","keys":["input"]},{"Q":"Auditing","A":"You'll need to support auditing both for consolidations of records and for why your system picked a specific rule. That is, any time a decision affects the outcome of the data, you'll need to be able to see why it happened, with no ambiguity.","keys":["auditing"]},{"Q":"Organizations","A":"Organizations can definitely have multiple addresses which they practice at. For example, consider Stanford Medical. They have tons of facilities with multiple addresses.","keys":["data","type","addresses"]},{"Q":"Missing area code","A":"There's no requirement that you be able to supplement the data with things like missing area codes or such.","keys":["cleaning"]},{"Q":"Audit log","A":"The audit log format will be determined per-team, in order to avoid cramping your style. You will need timestamps that will be granular enough to show in what order things happened. Store the log in a database table, so that it can be easily queried to determine why a decision was made. Don't worry about sorting it--that can be done in the queries.","keys":["auditing"]},{"Q":"Is this process automated","A":"The real run should be automated; an actual, professional MDM system wouldn't actually be completely automated, but for the purposes of this exercise we want your system to be fully automated. However, you are welcome to have, for example, manually-trained classifiers for the data.","keys":["code"]},{"Q":"Is data steward dashboard feasible?","A":"You're welcome to build a data steward dashboard to allow human input to your algorithm. This is useful because sometimes the data's so bad that you can't figure out what to do with it: it allows a human with business knowledge to audit it and tell you what to do with it. Technology choice here is free---choose what you will to get the job done. There will be extra pointage for this!","keys":["code"]},{"Q":"N percent messed with","A":"We've messed with some amount of the data other than 50%.","keys":["data"]},{"Q":"No conflicts among types","A":"There won't be conflicting values for the `type` field, but the data is not guaranteed to be better for one type than for the other.","keys":["data","type"]},{"Q":"Key vs results","A":"Your grade depends on how your data turns out. We do have a golden key, but you can do better than it. Your relative performance compared to the other teams matters more than your absolute performance. _Ed. note: Dr. Dekhtyar has offered an automatic A to any team who can make Eric cry._","keys":["class","grading"]},{"Q":"How does this relate to the topic of the class","A":"First, this activity is dealing with another major kind of data that you're likely to deal with in industry. The Bakery database is primarily an example of _transactional data_, whereas this project will give you an opportunity to work with _master data_. Second, this is a good example of another type of database that you might be tasked with designing. We've discussed a _data warehouse_---a database which stores denormalized data in order to make it easier to do queries against it. But that's only one kind of database. The database in this project will be another type, and gives you an opportunity to improve your skills in working with other types of database. You'll also get a taste of building an application from scratch to work with a database. We'll still be going through the steps we discuss in class in order to design the database. 60% of your database will be based on the description of the data; the remainder will be the populated remainder of the database.","keys":["class"]},{"Q":"Type and name are same","A":"Your business rules will determine how you call matches. The client will audit your rules to determine if they're acceptable. The choice of your rules is still up to you; the audit will handle ones that aren't good. When writing rules, keep in mind that missing data does not imply that a match is a good match. A helpful distinction to keep in mind is the difference between _correctness_ and _faithfulness_. _Correct_ rules reflect the business rules of the organisation you're working with. _Faithful_ execution of those rules implies that your program actually follows the rules you've given it. The appropriate balance on these factors must depend on the client you're working with. Keep in mind that clients will be slightly happy if you can pull off a really tough match, but will be furious if you match the wrong things.","keys":["matching"]},{"Q":"Multiple names and can't distinguish","A":"Figure it out. Do make sure that you look at the data in order to see what it really looks like.","keys":["matching"]},{"Q":"Preferences on what's in SQL vs Python","A":"You're welcome to put the brains wherever in the system works for you. Creativity is encouraged; we really don't mind if you have all the smarts built into the database in SQL and stored procedures or if you build the brains in another general-purpose programming language. Importantly, keep in mind that the software is not a deliverable: only the results are considered the deliverable for this class. That is, _you are not required to hand your code to the customer._ Before you go and clean all the data by hand, though, keep in mind that it will be really hard to make changes to the business rules you used under those kind of conditions.","keys":["code"]},{"Q":".......","A":"","keys":[]},{"Q":"Conflicting","A":"You will probably see various kinds of conflicts in the data, particularly things in odd places. For example, you might find a birth date on an organization which represents its incorporation date.","keys":["data"]},{"Q":"Matching people","A":"You'll need to weight your matches by field; some fields will carry more weight in determining a match than others.","keys":["matching"]},{"Q":"If DOB has year & switched month and day","A":"You may assume that all the extended dates (dates including day, month, and year) will be consistent in their format. Which format that will be we're not saying. It will be a Gregorian calendar date, however.","keys":["data","dates"]},{"Q":"Match rules","A":"You'll want to be able to fix or remove match rules that we say are no good. Keep in mind the distinction between technical and business problems: realise that sometimes it won't be possible to find a technical solution to a business problem and you'll need to consult a business expert. You'll find the hardest problem is often communication. A word of encouragement: you'll be able to ask more questions after seeing the data.","keys":["matching","rules"]},{"Q":"Match lever","A":"It would be a sweet feature to have a simple slider to tighten or loosen the matches; this would go really nicely with that dashboard idea. But keep in mind that not all rules can be quantified like that. So you'll have to figure out how to handle that.","keys":["matching","rules"]},{"Q":"How will we be given the rules?","A":"You'll need the capability to handle custom client rules---which might change in week eight. They'd be specified in English and you'll need to convert them to work in your system.","keys":["matching","rules"]},{"Q":"Design patterns for audit records","A":"There are lots of options for how to handle the kind of audit requirements we've given you. We're not going to suggest any design patterns for now, though---we don't want to encroach on your creativity.","keys":["code"]},{"Q":"Logging","A":"You'll need to figure out how you want to do the logging yourselves; the format will be publicly available, but you'll be able to make decisions per-group.","keys":["auditing","logging"]},{"Q":"Change one lab to go from stressing over specifics of use cases to specifics of business rules","A":"One of the labs may get changed from stressing the specifics of use cases to dealing with the specifics of business rules.","keys":["class"]},{"Q":"Output data","A":"You'll need to format the output data. The format won't be super complicated, and you'll get it when you get the input data.","keys":["output"]},{"Q":"Audit","A":"You'll need to be able to audit the who, what, when, why, and where of the actions your code has taken: * Who changed the data * What changed * Where in the pipeline was it changed * When did the change happen * Why did the change happen","keys":["auditing"]},{"Q":"Audit cleanse?","A":"Cleaning audits can be more vague. You should record the overall change in the record, but you don't need to record every step it took to get there.","keys":["auditing","cleaning"]}]
